# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2005/01/03 14:14:10+01:00 perex@suse.cz 
#   [ALSA] Fix the order of creation of instances
#   
#   AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   NM256 driver,Trident driver,YMFPCI driver
#   Make sure that the chip instance is created at first before other components.
#   This will fix occasional oops at unloading due to the access to the released
#   resources.
#   
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/azt3328.c
#   2005/01/03 04:45:31+01:00 perex@suse.cz +4 -4
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/cmipci.c
#   2005/01/03 04:45:31+01:00 perex@suse.cz +11 -14
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/cs4281.c
#   2005/01/03 04:45:31+01:00 perex@suse.cz +4 -4
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/cs46xx/cs46xx_lib.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +4 -4
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/ens1370.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +2 -1
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/korg1212/korg1212.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +8 -14
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/maestro3.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +13 -19
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/nm256/nm256.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +6 -6
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/sonicvibes.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +2 -1
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/trident/trident_main.c
#   2005/01/03 04:45:32+01:00 perex@suse.cz +5 -7
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
# sound/pci/ymfpci/ymfpci_main.c
#   2005/01/03 04:45:33+01:00 perex@suse.cz +2 -2
#   [ALSA] Fix the order of creation of instances
#   
#   D:2005/01/03 11:45:31
#   C:AZT3328 driver,CMIPCI driver,CS4281 driver,ENS1370/1+ driver
#   C:Maestro3 driver,SonicVibes driver,CS46xx driver,KORG1212 driver
#   C:NM256 driver,Trident driver,YMFPCI driver
#   F:pci/azt3328.c:1.23->1.24 
#   F:pci/cmipci.c:1.76->1.77 
#   F:pci/cs4281.c:1.68->1.69 
#   F:pci/ens1370.c:1.73->1.74 
#   F:pci/maestro3.c:1.67->1.68 
#   F:pci/sonicvibes.c:1.44->1.45 
#   F:pci/cs46xx/cs46xx_lib.c:1.92->1.93 
#   F:pci/korg1212/korg1212.c:1.52->1.53 
#   F:pci/nm256/nm256.c:1.57->1.58 
#   F:pci/trident/trident_main.c:1.68->1.69 
#   F:pci/ymfpci/ymfpci_main.c:1.63->1.64 
#   L:Make sure that the chip instance is created at first before other components.
#   L:This will fix occasional oops at unloading due to the access to the released
#   L:resources.
#   Signed-off-by: Takashi Iwai <tiwai@suse.de>
# 
diff -Nru a/sound/pci/azt3328.c b/sound/pci/azt3328.c
--- a/sound/pci/azt3328.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/azt3328.c	2005-01-22 23:23:00 -08:00
@@ -1344,14 +1344,14 @@
 	for (tmp=0; tmp <= 0x01; tmp += 1)
 		snd_azf3328_dbgmisc("0x%02x: opl 0x%04x, mpu300 0x%04x, mpu310 0x%04x, mpu320 0x%04x, mpu330 0x%04x\n", tmp, inb(0x388 + tmp), inb(0x300 + tmp), inb(0x310 + tmp), inb(0x320 + tmp), inb(0x330 + tmp));
 
-	/* create mixer interface & switches */
-	if ((err = snd_azf3328_mixer_new(chip)) < 0)
-		return err;
-
 	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops)) < 0) {
 		snd_azf3328_free(chip);
 		return err;
 	}
+
+	/* create mixer interface & switches */
+	if ((err = snd_azf3328_mixer_new(chip)) < 0)
+		return err;
 
 #if 0
 	/* set very low bitrate to reduce noise and power consumption? */
diff -Nru a/sound/pci/cmipci.c b/sound/pci/cmipci.c
--- a/sound/pci/cmipci.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/cmipci.c	2005-01-22 23:23:00 -08:00
@@ -2608,8 +2608,8 @@
 
 	if (request_irq(pci->irq, snd_cmipci_interrupt, SA_INTERRUPT|SA_SHIRQ, card->driver, (void *)cm)) {
 		snd_printk("unable to grab IRQ %d\n", pci->irq);
-		err = -EBUSY;
-		goto __error;
+		snd_cmipci_free(cm);
+		return -EBUSY;
 	}
 	cm->irq = pci->irq;
 
@@ -2662,6 +2662,11 @@
 		break;
 	}
 
+	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, cm, &ops)) < 0) {
+		snd_cmipci_free(cm);
+		return err;
+	}
+
 	/* set MPU address */
 	switch (iomidi) {
 	case 0x320: val = CM_VMPU_320; break;
@@ -2717,22 +2722,22 @@
 	/* create pcm devices */
 	pcm_index = pcm_spdif_index = 0;
 	if ((err = snd_cmipci_pcm_new(cm, pcm_index)) < 0)
-		goto __error;
+		return err;
 	pcm_index++;
 	if (cm->has_dual_dac) {
 		if ((err = snd_cmipci_pcm2_new(cm, pcm_index)) < 0)
-			goto __error;
+			return err;
 		pcm_index++;
 	}
 	if (cm->can_ac3_hw || cm->can_ac3_sw) {
 		pcm_spdif_index = pcm_index;
 		if ((err = snd_cmipci_pcm_spdif_new(cm, pcm_index)) < 0)
-			goto __error;
+			return err;
 	}
 
 	/* create mixer interface & switches */
 	if ((err = snd_cmipci_mixer_new(cm, pcm_spdif_index)) < 0)
-		goto __error;
+		return err;
 
 	if (iomidi > 0) {
 		if ((err = snd_mpu401_uart_new(card, 0, MPU401_HW_CMIPCI,
@@ -2742,10 +2747,6 @@
 		}
 	}
 
-	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, cm, &ops)) < 0) {
-		snd_cmipci_free(cm);
-		return err;
-	}
 #ifdef USE_VAR48KRATE
 	for (val = 0; val < ARRAY_SIZE(rates); val++)
 		snd_cmipci_set_pll(cm, rates[val], val);
@@ -2785,10 +2786,6 @@
 
 	*rcmipci = cm;
 	return 0;
-
- __error:
-	snd_cmipci_free(cm);
-	return err;
 }
 
 /*
diff -Nru a/sound/pci/cs4281.c b/sound/pci/cs4281.c
--- a/sound/pci/cs4281.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/cs4281.c	2005-01-22 23:23:00 -08:00
@@ -1439,14 +1439,14 @@
 		return tmp;
 	}
 
-	snd_cs4281_proc_init(chip);
-
-	snd_card_set_pm_callback(card, cs4281_suspend, cs4281_resume, chip);
-
 	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops)) < 0) {
 		snd_cs4281_free(chip);
 		return err;
 	}
+
+	snd_cs4281_proc_init(chip);
+
+	snd_card_set_pm_callback(card, cs4281_suspend, cs4281_resume, chip);
 
 	snd_card_set_dev(card, &pci->dev);
 
diff -Nru a/sound/pci/cs46xx/cs46xx_lib.c b/sound/pci/cs46xx/cs46xx_lib.c
--- a/sound/pci/cs46xx/cs46xx_lib.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/cs46xx/cs46xx_lib.c	2005-01-22 23:23:00 -08:00
@@ -3909,15 +3909,15 @@
 		return err;
 	}
 
-	snd_cs46xx_proc_init(card, chip);
-
-	snd_card_set_pm_callback(card, snd_cs46xx_suspend, snd_cs46xx_resume, chip);
-
 	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops)) < 0) {
 		snd_cs46xx_free(chip);
 		return err;
 	}
 	
+	snd_cs46xx_proc_init(card, chip);
+
+	snd_card_set_pm_callback(card, snd_cs46xx_suspend, snd_cs46xx_resume, chip);
+
 	chip->active_ctrl(chip, -1); /* disable CLKRUN */
 
 	snd_card_set_dev(card, &pci->dev);
diff -Nru a/sound/pci/ens1370.c b/sound/pci/ens1370.c
--- a/sound/pci/ens1370.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/ens1370.c	2005-01-22 23:23:00 -08:00
@@ -1924,7 +1924,6 @@
 	ensoniq->subsystem_vendor_id = cmdw;
 	pci_read_config_word(pci, PCI_SUBSYSTEM_ID, &cmdw);
 	ensoniq->subsystem_device_id = cmdw;
-	snd_ensoniq_proc_init(ensoniq);
 #ifdef CHIP1370
 #if 0
 	ensoniq->ctrl = ES_1370_CDC_EN | ES_1370_SERR_DISABLE | ES_1370_PCLKDIVO(ES_1370_SRTODIV(8000));
@@ -2016,6 +2015,8 @@
 		snd_ensoniq_free(ensoniq);
 		return err;
 	}
+
+	snd_ensoniq_proc_init(ensoniq);
 
 	snd_card_set_dev(card, &pci->dev);
 
diff -Nru a/sound/pci/korg1212/korg1212.c b/sound/pci/korg1212/korg1212.c
--- a/sound/pci/korg1212/korg1212.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/korg1212/korg1212.c	2005-01-22 23:23:00 -08:00
@@ -2412,14 +2412,17 @@
 	if (rc) K1212_DEBUG_PRINTK("K1212_DEBUG: Reboot Card - RC = %d [%s]\n", rc, stateName[korg1212->cardState]);
 #endif
 
+        if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, korg1212, &ops)) < 0) {
+                snd_korg1212_free(korg1212);
+                return err;
+        }
+        
 	snd_korg1212_EnableCardInterrupts(korg1212);
 
 	mdelay(CARD_BOOT_DELAY_IN_MS);
 
-        if (snd_korg1212_downloadDSPCode(korg1212)) {
-                snd_korg1212_free(korg1212);
+        if (snd_korg1212_downloadDSPCode(korg1212))
         	return -EBUSY;
-	}
 
 	printk(KERN_INFO "dspMemPhy       = %08x U[%08x]\n"
                "PlayDataPhy     = %08x L[%08x]\n"
@@ -2434,10 +2437,8 @@
                korg1212->RoutingTablePhy, LowerWordSwap(korg1212->RoutingTablePhy),
                korg1212->AdatTimeCodePhy, LowerWordSwap(korg1212->AdatTimeCodePhy));
 
-        if ((err = snd_pcm_new(korg1212->card, "korg1212", 0, 1, 1, &korg1212->pcm)) < 0) {
-                snd_korg1212_free(korg1212);
+        if ((err = snd_pcm_new(korg1212->card, "korg1212", 0, 1, 1, &korg1212->pcm)) < 0)
                 return err;
-	}
 
 	korg1212->pcm->private_data = korg1212;
         korg1212->pcm->private_free = snd_korg1212_free_pcm;
@@ -2454,18 +2455,11 @@
 
         for (i = 0; i < ARRAY_SIZE(snd_korg1212_controls); i++) {
                 err = snd_ctl_add(korg1212->card, snd_ctl_new1(&snd_korg1212_controls[i], korg1212));
-                if (err < 0) {
-			snd_korg1212_free(korg1212);
+                if (err < 0)
                         return err;
-		}
         }
 
         snd_korg1212_proc_init(korg1212);
-        
-        if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, korg1212, &ops)) < 0) {
-                snd_korg1212_free(korg1212);
-                return err;
-        }
         
 	snd_card_set_dev(card, &pci->dev);
 
diff -Nru a/sound/pci/maestro3.c b/sound/pci/maestro3.c
--- a/sound/pci/maestro3.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/maestro3.c	2005-01-22 23:23:00 -08:00
@@ -2564,26 +2564,7 @@
 
 	snd_m3_assp_init(chip);
 	snd_m3_amp_enable(chip, 1);
-    
-	if ((err = snd_m3_mixer(chip)) < 0) {
-		snd_m3_free(chip);
-		return err;
-	}
 
-	for (i = 0; i < chip->num_substreams; i++) {
-		m3_dma_t *s = &chip->substreams[i];
-		s->chip = chip;
-		if ((err = snd_m3_assp_client_init(chip, s, i)) < 0) {
-			snd_m3_free(chip);
-			return err;
-		}
-	}
-    
-	if ((err = snd_m3_pcm(chip, 0)) < 0) {
-		snd_m3_free(chip);
-		return err;
-	}
-    
 	if (request_irq(pci->irq, snd_m3_interrupt, SA_INTERRUPT|SA_SHIRQ,
 			card->driver, (void *)chip)) {
 		snd_printk("unable to grab IRQ %d\n", pci->irq);
@@ -2605,6 +2586,19 @@
 		return err;
 	}
 
+	if ((err = snd_m3_mixer(chip)) < 0)
+		return err;
+
+	for (i = 0; i < chip->num_substreams; i++) {
+		m3_dma_t *s = &chip->substreams[i];
+		s->chip = chip;
+		if ((err = snd_m3_assp_client_init(chip, s, i)) < 0)
+			return err;
+	}
+
+	if ((err = snd_m3_pcm(chip, 0)) < 0)
+		return err;
+    
 	snd_m3_enable_ints(chip);
 	snd_m3_assp_continue(chip);
 
diff -Nru a/sound/pci/nm256/nm256.c b/sound/pci/nm256/nm256.c
--- a/sound/pci/nm256/nm256.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/nm256/nm256.c	2005-01-22 23:23:00 -08:00
@@ -1486,12 +1486,6 @@
 
 	snd_nm256_init_chip(chip);
 
-	if ((err = snd_nm256_pcm(chip, 0)) < 0)
-		goto __error;
-	
-	if ((err = snd_nm256_mixer(chip)) < 0)
-		goto __error;
-
 	// pci_set_master(pci); /* needed? */
 	
 	snd_card_set_pm_callback(card, nm256_suspend, nm256_resume, chip);
@@ -1610,6 +1604,12 @@
 	if (reset_workaround[dev]) {
 		snd_printdd(KERN_INFO "nm256: reset_workaround activated\n");
 		chip->reset_workaround = 1;
+	}
+
+	if ((err = snd_nm256_pcm(chip, 0)) < 0 ||
+	    (err = snd_nm256_mixer(chip)) < 0) {
+		snd_card_free(card);
+		return err;
 	}
 
 	sprintf(card->shortname, "NeoMagic %s", card->driver);
diff -Nru a/sound/pci/sonicvibes.c b/sound/pci/sonicvibes.c
--- a/sound/pci/sonicvibes.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/sonicvibes.c	2005-01-22 23:23:00 -08:00
@@ -1333,12 +1333,13 @@
 #endif
 	sonic->revision = snd_sonicvibes_in(sonic, SV_IREG_REVISION);
 	snd_ctl_add(card, snd_ctl_new1(&snd_sonicvibes_game_control, sonic));
-	snd_sonicvibes_proc_init(sonic);
 
 	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, sonic, &ops)) < 0) {
 		snd_sonicvibes_free(sonic);
 		return err;
 	}
+
+	snd_sonicvibes_proc_init(sonic);
 
 	snd_card_set_dev(card, &pci->dev);
 
diff -Nru a/sound/pci/trident/trident_main.c b/sound/pci/trident/trident_main.c
--- a/sound/pci/trident/trident_main.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/trident/trident_main.c	2005-01-22 23:23:00 -08:00
@@ -3614,10 +3614,13 @@
 		return err;
 	}
 
-	if ((err = snd_trident_mixer(trident, pcm_spdif_device)) < 0) {
+	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, trident, &ops)) < 0) {
 		snd_trident_free(trident);
 		return err;
 	}
+
+	if ((err = snd_trident_mixer(trident, pcm_spdif_device)) < 0)
+		return err;
 	
 	/* initialise synth voices */
 	for (i = 0; i < 64; i++) {
@@ -3638,12 +3641,7 @@
 
 	
 	snd_card_set_pm_callback(card, snd_trident_suspend, snd_trident_resume, trident);
-
 	snd_trident_proc_init(trident);
-	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, trident, &ops)) < 0) {
-		snd_trident_free(trident);
-		return err;
-	}
 	snd_card_set_dev(card, &pci->dev);
 	*rtrident = trident;
 	return 0;
@@ -3653,7 +3651,7 @@
    snd_trident_free
   
    Description: This routine will free the device specific class for
-            q    the 4DWave card. 
+                the 4DWave card. 
                 
    Paramters:   trident  - device specific private data for 4DWave card
 
diff -Nru a/sound/pci/ymfpci/ymfpci_main.c b/sound/pci/ymfpci/ymfpci_main.c
--- a/sound/pci/ymfpci/ymfpci_main.c	2005-01-22 23:23:00 -08:00
+++ b/sound/pci/ymfpci/ymfpci_main.c	2005-01-22 23:23:00 -08:00
@@ -2266,12 +2266,12 @@
 	snd_card_set_pm_callback(card, snd_ymfpci_suspend, snd_ymfpci_resume, chip);
 #endif
 
-	snd_ymfpci_proc_init(card, chip);
-
 	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops)) < 0) {
 		snd_ymfpci_free(chip);
 		return err;
 	}
+
+	snd_ymfpci_proc_init(card, chip);
 
 	snd_card_set_dev(card, &pci->dev);
 
