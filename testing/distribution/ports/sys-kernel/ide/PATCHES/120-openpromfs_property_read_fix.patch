# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2005/02/02 13:15:59-08:00 viro@parcelfarce.linux.theplanet.co.uk 
#   [PATCH] openpromfs property_read() fix
#   
#   openpromfs property_read() is slightly abused by property_write() - the
#   latter calls property_read(file, NULL, 0, NULL) if we still hadn't done
#   any IO on that file; property_read() will do setup work and, since it's
#   called with count equal to 0, do nothing else.
#   
#   That stopped working - now we check if *ppos is sane before doing
#   anything else and that, of course, oopses.  Trivial fix is to move the
#   check past that for count == 0...
#   
#   Signed-off-by: Al Viro <viro@parcelfarce.linux.theplanet.co.uk>
#   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
# fs/openpromfs/inode.c
#   2005/02/01 23:45:36-08:00 viro@parcelfarce.linux.theplanet.co.uk +2 -2
#   openpromfs property_read() fix
# 
diff -Nru a/fs/openpromfs/inode.c b/fs/openpromfs/inode.c
--- a/fs/openpromfs/inode.c	2005-02-14 04:45:14 -08:00
+++ b/fs/openpromfs/inode.c	2005-02-14 04:45:14 -08:00
@@ -94,8 +94,6 @@
 	openprom_property *op;
 	char buffer[64];
 	
-	if (*ppos >= 0xffffff || count >= 0xffffff)
-		return -EINVAL;
 	if (!filp->private_data) {
 		node = nodes[(u16)((long)inode->u.generic_ip)].node;
 		i = ((u32)(long)inode->u.generic_ip) >> 16;
@@ -168,6 +166,8 @@
 		op = (openprom_property *)filp->private_data;
 	if (!count || !(op->len || (op->flag & OPP_ASCIIZ)))
 		return 0;
+	if (*ppos >= 0xffffff || count >= 0xffffff)
+		return -EINVAL;
 	if (op->flag & OPP_STRINGLIST) {
 		for (k = 0, p = op->value; p < op->value + op->len; p++)
 			if (!*p)
